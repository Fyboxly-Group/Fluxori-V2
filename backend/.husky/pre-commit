#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Stash any unstaged changes so we only check what's being committed
echo "📦 Stashing unstaged changes to verify commit..."
git stash -q --keep-index

# Define cleanup function to ensure stash is restored on any exit
cleanup() {
  echo "🧹 Restoring unstaged changes..."
  git stash pop -q
  
  # If there's an error, pop again in case we failed to pop the first time
  if [ $? -ne 0 ]; then
    # Check if there's actually anything to pop
    if git stash list | grep -q "stash@{0}"; then
      git stash pop -q
    fi
  fi
}

# Setup trap to ensure cleanup runs even on error
trap cleanup EXIT

# Run lint-staged with --no-stash since we already stashed
echo "🔍 Linting and formatting staged files..."
npx lint-staged --no-stash

LINTING_STATUS=$?
if [ $LINTING_STATUS -ne 0 ]; then
  echo "❌ Linting failed! Fix the errors before committing."
  exit 1
fi

# Run TypeScript check with optimizations
echo "🧪 Running TypeScript check..."
# Use --incremental and --cache for better performance
npx tsc --noEmit --incremental --cache --skipLibCheck --project tsconfig.json

TS_STATUS=$?
if [ $TS_STATUS -ne 0 ]; then
  echo "❌ TypeScript check failed! Fix the errors before committing."
  exit 1
fi

# Find files being committed
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.ts$')

if [ -n "$STAGED_FILES" ]; then
  # Check for any "any" typings that could be more specific
  echo "⚠️ Checking for excessive 'any' type usage in modified files..."
  echo "$STAGED_FILES" | xargs grep -l ': any\|as any' 2>/dev/null | \
  while read file; do
    echo "  - $file contains 'any' type usage that could potentially be replaced with more specific types"
    ANY_COUNT=$(grep -c ': any\|as any' "$file")
    echo "    Found $ANY_COUNT occurrences of 'any'"
  done
  
  # Check for common TypeScript anti-patterns
  echo "🔎 Checking for TypeScript anti-patterns..."
  
  # Check for non-null assertions
  echo "$STAGED_FILES" | xargs grep -l '!' 2>/dev/null | \
  while read file; do
    NON_NULL_COUNT=$(grep -c '[a-zA-Z0-9_]\+!' "$file")
    if [ "$NON_NULL_COUNT" -gt 0 ]; then
      echo "  - $file contains $NON_NULL_COUNT non-null assertions (!), consider using optional chaining or proper null checks"
    fi
  done
  
  # Check for type casting using as
  echo "$STAGED_FILES" | xargs grep -l ' as ' 2>/dev/null | \
  while read file; do
    AS_COUNT=$(grep -c ' as ' "$file")
    if [ "$AS_COUNT" -gt 5 ]; then
      echo "  - $file uses type casting ($AS_COUNT times), consider using type guards or proper typing"
    fi
  done
  
  # Check for usage of Function type (discouraged)
  echo "$STAGED_FILES" | xargs grep -l ': Function\|as Function' 2>/dev/null | \
  while read file; do
    echo "  - $file uses the 'Function' type, which is discouraged. Use more specific function types instead."
  done
  
  # Check for circular dependencies
  echo "🔄 Checking for circular dependencies..."
  if command -v madge &> /dev/null; then
    # Get any potential circular dependencies in staged files
    STAGED_DIRS=$(echo "$STAGED_FILES" | xargs dirname | sort | uniq)
    for dir in $STAGED_DIRS; do
      CIRCULAR=$(npx madge --extensions ts --circular "$dir" 2>/dev/null)
      if [ -n "$CIRCULAR" ]; then
        echo "  - $dir contains circular dependencies: $CIRCULAR"
      fi
    done
  fi
fi

# Check for unhandled Promise rejections in controller files
CONTROLLER_FILES=$(echo "$STAGED_FILES" | grep "controller.ts$")
if [ -n "$CONTROLLER_FILES" ]; then
  echo "🔄 Checking controller files for unhandled promises..."
  echo "$CONTROLLER_FILES" | while read file; do
    # Look for functions that are async but don't use try/catch
    UNHANDLED=$(grep -A 5 "async.*=>" "$file" | grep -v "try {" | grep -v "catch" | grep -E "Promise|await")
    if [ -n "$UNHANDLED" ]; then
      echo "  - $file might have unhandled promises. Consider adding try/catch blocks."
    fi
  done
fi

echo "✅ Pre-commit checks passed!"
exit 0