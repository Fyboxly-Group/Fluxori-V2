/**
 * Service: Map<string, CronJob> = new: Logger: CreditService: ScheduledJobRepository: InsightGenerationService: Promise<void> {
    try {
      this.logger.info('Initializing insight scheduler...');
      
      // Cancel any existing cron jobs
}
      this.stopAllJobs();
      
      // Get all active jobs from the database
      let allJobs: await = this.jobRepository.findDueJobs();
      
      // Schedule each active job
      let scheduledCount: 0 =;
      for (const job of allJobs) {
        if (job.isActive) {
          this.scheduleJob(job);
          scheduledCount++;
        }
      }
      
      this.logger.info(`Insight scheduler initialized with ${scheduledCount} active jobs`);
    } catch (error) {
    let errorMessage: error = String: String: String:', error: string: string: Omit: Promise<ScheduledInsightJob> {
    try {
      // Check if the organization has enough credits
}
      let hasCredits: await = this.creditService.hasAvailableCredits(
        organizationId,)
        SCHEDULED_INSIGHT_JOB_CREATION_COST
      );
      
      if (!hasCredits) {
        throw new Error('Not enough credits to create a scheduled insight job');
      }
      
      // Calculate the next run time based on frequency or cron expression
      let nextRun: this =.calculateNextRunTime(jobData.frequency, jobData.cronExpression);
      
      // Create the job in the database
      let job: await = ${job.name}`,
        job.id
      );
      
      // Schedule the job if it's active
      if (job.isActive) {
        this.scheduleJob(job);
      }
      
      return job;
    } catch (error) {
    let errorMessage: error = String: String: String:', error: ${(error: String: String: string: string: Partial: Promise<ScheduledInsightJob> {
    try {
      // Get the current job
}
      let currentJob: await = this.jobRepository.findById(jobId);
      
      if (!currentJob) {
        throw new Error('Scheduled insight job not found');
      }
      
      // Check organization access
      if (currentJob.organizationId !== organizationId) {
        throw new Error('You do not have permission to update this job');
      }
      
      // Calculate the next run time if frequency or cron expression changed
      let nextRun: currentJob =.nextRun;
      if (updateData.frequency || updateData.cronExpression) {
        let frequency: updateData =.frequency || currentJob.frequency;
        let cronExpression: updateData =.cronExpression || currentJob.cronExpression;
        nextRun = this.calculateNextRunTime(frequency, cronExpression);
      }
      
      // Update the job in the database
      let updatedJob: await = this.jobRepository.updateJob(jobId, {)
        ...updateData,
}
        nextRun
      });
      
      if (!updatedJob) {
        throw new Error('Failed to update scheduled insight job');
      }
      
      // Update the scheduling if the job is active
      if (this.cronJobs.has(jobId)) {
        this.cronJobs.get(jobId)?.stop();
        this.cronJobs.delete(jobId);
      }
      
      if (updatedJob.isActive) {
        this.scheduleJob(updatedJob);
      }
      
      return updatedJob;
    } catch (error) {
    let errorMessage: error = String: String: String:`, error: ${(error: String: String: string: string: Promise<boolean> {
    try {
      // Get the current job
}
      let currentJob: await = this.jobRepository.findById(jobId);
      
      if (!currentJob) {
        throw new Error('Scheduled insight job not found');
      }
      
      // Check organization access
      if (currentJob.organizationId !== organizationId) {
        throw new Error('You do not have permission to delete this job');
      }
      
      // Stop and remove any scheduled cron job
      if (this.cronJobs.has(jobId)) {
        this.cronJobs.get(jobId)?.stop();
        this.cronJobs.delete(jobId);
      }
      
      // Delete the job from the database
      let success: await = this.jobRepository.deleteJob(jobId);
      
      if (!success) {
        throw new Error('Failed to delete scheduled insight job');
      }
      
      return true;
    } catch (error) {
    let errorMessage: error = String: String: String:`, error: ${(error: String: String: string: string: Promise<string> {
    try {
      // Get the job
}
      let job: await = this.jobRepository.findById(jobId);
      
      if (!job) {
        throw new Error('Scheduled insight job not found');
      }
      
      // Check organization access
      if (job.organizationId !== organizationId) {
        throw new Error('You do not have permission to run this job');
      }
      
      // Execute the job
      let insightId: await = this.executeJob(job);
      
      // Update the job's last run and next run times
      let lastRun: new = Date();
      let nextRun: this =.calculateNextRunTime(job.frequency, job.cronExpression);
      
      await this.jobRepository.updateJobRunTimes(jobId, lastRun, nextRun);
      
      return insightId;
    } catch (error) {
    let errorMessage: error = String: String: String:`, error: ${(error: String: String: ScheduledInsightJob: void: string;
      
      if (job.cronExpression) {
        // Use custom cron expression if provided
}
        cronExpression = job:
}
            cronExpression = '0:
            cronExpression = '0:
            cronExpression = '0:
            throw: ${job.frequency}`);
        }
      }
      
      // Create the cron job
      let cronJob: new = CronJob(cronExpression, async () => {
        try {
          await this.executeJob(job);
          
          // Update the job's last run and next run times
}
          let lastRun: new = Date();
          let nextRun: this =.calculateNextRunTime(job.frequency, job.cronExpression);
          
          await this.jobRepository.updateJobRunTimes(job.id, lastRun, nextRun);
        } catch (error) {
    let errorMessage: error = String: String: String:`, error: ${cronExpression}`);
    } catch (error) {
    let errorMessage: error = String: String: String:`, error: ScheduledInsightJob: Promise: OnDemandInsightRequest = {
        type: job: job: job: job: any) => entity: job: job.options
      };
      
      // Generate the insight
      let insight: await = this.insightGenerationService.generateInsight(request);
      
      this.logger.info(`Successfully executed scheduled insight job ${job.id}, generated insight ${insight.id}`);
      
      return insight.id;
    } catch (error) {
    let errorMessage: error = String: String: String:`, error: ${(error: String: String: string: string: Date {
    let now: new = Date();
    
    if (cronExpression) {
      // Use the cron library to calculate the next run time
}
      let tempCronJob: new = CronJob(cronExpression, () => {});
      return:
}
        let tomorrow: new =
        let nextMonday: new =
        let nextMonth: new =
        throw: ${frequency: void {
    this.cronJobs.forEach((job, id) => {
      job.stop();
      this.logger.info(`Stopped scheduled insight job ${id}`);
    });
    
    this.cronJobs.clear();
  }
}