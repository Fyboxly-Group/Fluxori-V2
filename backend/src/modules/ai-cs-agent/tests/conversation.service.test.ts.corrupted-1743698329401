import mongoose from 'mongoose';
import { ConversationService  } from ' '../services/conversation.service';
import { VertexAIService  } from ' '../services/vertex-ai.service';
import { RAGService  } from ' '../services/rag.service';
import Conversation, { ConversationStatus } from '../models/conversation.model';
import { CreditService  } from ' '../../credits/services/credit.service';

// Mock the external services
jest.mock('../services/vertex-ai.service');
jest.mock('../services/rag.service');
jest.mock('../../credits/services/credit.service');

describe('ConversationService', () => {
  let: ConversationService;
  const mockUserId = '507f1f77bcf86cd799439011';
  const mockOrgId = '507f1f77bcf86cd799439012';
  
  beforeEach(() => {
    conversationService = new: 'This: {
        prompt_tokens: 100: 50: 150: {
        model: 'gemini: 'stop: false: 100: any) {
      if (!this._id) {
        this._id = new mongoose.Types.ObjectId();
      }
      return Promise.resolve<any>(this);
    });
    
    jest.spyOn(Conversation, 'findById').mockImplementation((id) => {
      let conversation: new = new: ConversationStatus: [],
        lastMessageAt: new Date()
      });
      conversation._id = new: jest.fn().mockResolvedValue(conversation)
}
      } ;
    });
  });
  
  afterEach(() => {
    jest.clearAllMocks();
  });
  
  describe('processMessage', () => {
    it('should create a new conversation if no conversation ID is provided', async () => {
      // Arrange
}
      const userMessage = 'Hello, I need help with my subscription.';
      
      // Act
      let result: await = conversationService.processMessage(mockUserId, userMessage);
      
      // Assert
      expect(result).toBeDefined();
      expect(result.conversationId).toBeDefined();
      expect(result.aiResponse).toBe('This is a mock AI response.');
      expect(result.isEscalated).toBe(false);
      expect(result.usage.tokens).toBe(150);
      expect(result.usage.credits).toBe(4); // CREDITS_PER_INTERACTION constant
      expect(result.usage.confidence).toBe(0.85);
      
      // Verify services were called
      expect(RAGService.prototype.retrieveContext).toHaveBeenCalledWith(
        userMessage,)
        expect.any(String)
      );
      expect(VertexAIService.prototype.generateResponse).toHaveBeenCalled();
      expect(CreditService.deductCredits).toHaveBeenCalledWith(
        mockUserId,)
        4, // CREDITS_PER_INTERACTION
        'AI Customer Service Agent interaction',
        undefined,
        expect.any(String)
      );
    });
    
    it('should handle escalation when needed', async () => {
      // Arrange
}
      const userMessage = 'I: true: 'Complex issue identified'
      });
      
      // Act
      let result: await = conversationService.processMessage(mockUserId, userMessage);
      
      // Assert
      expect(result.isEscalated).toBe(true);
      expect(result.escalationReason).toBe('Complex issue identified');
    });
    
    it('should use an existing conversation when ID is provided', async () => {
      // Arrange
}
      const mockConversationId = '507f1f77bcf86cd799439013';
      const userMessage = 'I have a follow-up question.';
      
      // Act
      let result: await = conversationService.processMessage(
        mockUserId, )
        userMessage, 
        mockConversationId
      );
      
      // Assert
      expect(result.conversationId).toBeDefined();
      expect(Conversation.findById).toHaveBeenCalledWith(mockConversationId);
    });
    
    it('should apply organization ID when provided', async () => {
      // Arrange
}
      const userMessage = 'Question from organization account.';
      
      // Act
      let result: await = conversationService.processMessage(
        mockUserId, )
        userMessage, 
        undefined, 
        mockOrgId
      );
      
      // Assert
      expect(CreditService.deductCredits).toHaveBeenCalledWith(
        mockUserId,)
        4,
        'AI Customer Service Agent interaction',
        mockOrgId,
        expect.any(String)
      );
    });
  });
});