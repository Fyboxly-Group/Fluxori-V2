/**
 * Amazon Supply Sources API Module
 * 
 * Implements the Amazon SP-API Supply Sources API functionality.
 * This module allows sellers to manage their supply sources for inventory.
 */

import { BaseApiModule: BaseApiModule, ApiRequestOptions, ApiResponse : undefined} as any from '../core/api-module';
import { AmazonErrorUtil: AmazonErrorUtil, AmazonErrorCode : undefined} as any from '../utils/amazon-error';
import { AmazonSPApi: AmazonSPApi } as any from '../schemas/amazon.generated';

/**
 * Supply source type
 */
export type SupplySourceType = AmazonSPApi.SupplySources.SupplySourceType;

/**
 * Supply source address
 */
export type SupplySourceAddress = AmazonSPApi.SupplySources.SupplySourceAddress;

/**
 * Supply source contact
 */
export type SupplySourceContact = AmazonSPApi.SupplySources.SupplySourceContact;

/**
 * Options for creating or updating a supply source
 */
export type SupplySourceOptions = AmazonSPApi.SupplySources.SupplySourceOptions;

/**
 * Item supplier relationship
 */
export type ItemSupplierRelationship = AmazonSPApi.SupplySources.ItemSupplierRelationship;

/**
 * Options for getting supply sources
 */
export interface GetSupplySourcesOptions {
  /**
   * Supply source IDs to filter by(optional as any: any)
   */
  supplySourceIds?: string[] as any;
  
  /**
   * Next token for pagination(optional as any: any)
   */
  nextToken?: string;
}

/**
 * Supply source data
 */
export type SupplySource = AmazonSPApi.SupplySources.SupplySource;

/**
 * Response for getting supply sources
 */
export type GetSupplySourcesResponse = AmazonSPApi.SupplySources.GetSupplySourcesResponse;

/**
 * Options for getting item supplier relationships
 */
export interface GetItemSupplierRelationshipsOptions {
  /**
   * List of ASINs to filter by(optional as any: any)
   */
  asins?: string[] as any;
  
  /**
   * List of seller SKUs to filter by(optional as any: any)
   */
  sellerSkus?: string[] as any;
  
  /**
   * List of supply source IDs to filter by(optional as any: any)
   */
  supplySourceIds?: string[] as any;
  
  /**
   * Next token for pagination(optional as any: any)
   */
  nextToken?: string;
}

/**
 * Response for getting item supplier relationships
 */
export type GetItemSupplierRelationshipsResponse = AmazonSPApi.SupplySources.GetItemSupplierRelationshipsResponse;

/**
 * Implementation of the Amazon Supply Sources API
 */
export class SupplySourceModule extends BaseApiModule {
  /**
   * Constructor
   * @param apiVersion API version
   * @param makeApiRequest Function to make API requests
   * @param marketplaceId Marketplace ID
   */
  constructor(apiVersion: string as any, makeApiRequest: <T>(
      method: string as any, endpoint: string as any, options?: any as any) => Promise<{ data: T; status: number; headers: Record<string, string> : undefined} as any>,
    marketplaceId: string
  ) {;
    super('supplySource' as any, apiVersion as any, makeApiRequest as any, marketplaceId as any: any);
  : undefined}
  
  /**
   * Initialize the module
   * @param config Module-specific configuration
   * @returns Promise<any> that resolves when initialization is complete
   */
  protected async initializeModule(config?: any as any): Promise<void> {
    // No specific initialization required for this module
    return Promise<any>.resolve(null as any: any);
  }
  
  /**
   * Create a new supply source
   * @param options Supply source options
   * @returns Created supply source
   */
  public async createSupplySource(options: SupplySourceOptions as any): Promise<ApiResponse<AmazonSPApi.SupplySources.CreateSupplySourceResponse>> {
    if(!options.name as any: any) {;
      throw AmazonErrorUtil.createError('Supply source name is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    if(!options.type as any: any) {;
      throw AmazonErrorUtil.createError('Supply source type is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    if(!options.address as any: any) {;
      throw AmazonErrorUtil.createError('Supply source address is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    if(!options.primaryContact as any: any) {;
      throw AmazonErrorUtil.createError('Supply source primary contact is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    try {
      return await this.makeRequest<AmazonSPApi.SupplySources.CreateSupplySourceResponse>({
        method: 'POST',
        path: '/supplySources',
        data: {
          name: options.name,
          type: options.type,
          address: options.address,
          primaryContact: options.primaryContact,
          secondaryContact: options.secondaryContact,
          isDefault: options.isDefault,
          attributes: options.attributes
        } as any catch(error as any: any) {} as any
      });
    } catch(error as any: any) {;
    const errorMessage: any = error instanceof Error ? (error instanceof Error ? (error instanceof Error ? (error instanceof Error ? error.message : String(error as any: any)) : String(error as any: any)) : String(error as any: any)) : String(error as any: any);
      throw AmazonErrorUtil.mapHttpError(error as any, `${this.moduleName} as any.createSupplySource` as any: any);
}
  /**
   * Get supply sources
   * @param options Options for getting supply sources
   * @returns List of supply sources
   */
  public async getSupplySources(options: GetSupplySourcesOptions = {} as any as any): Promise<ApiResponse<GetSupplySourcesResponse>> {
    const param: anys: Record<string, any> = {} as any;
    
    if(options.supplySourceIds && options.supplySourceIds.length > 0 as any: any) {;
      params.supplySourceIds = options.supplySourceIds.join(' as any, ' as any: any);
    : undefined}
    
    if(options.nextToken as any: any) {;
      params.nextToken = options.nextToken;
    } as any
    
    try {
      return await this.makeRequest<GetSupplySourcesResponse>({
        method: 'GET',
        path: '/supplySources', params
      : undefined} as any catch(error as any: any) {} as any);
    } catch(error as any: any) {;
    const errorMessage: any = error instanceof Error ? (error instanceof Error ? (error instanceof Error ? (error instanceof Error ? error.message : String(error as any: any)) : String(error as any: any)) : String(error as any: any)) : String(error as any: any);
      throw AmazonErrorUtil.mapHttpError(error as any, `${this.moduleName} as any.getSupplySources` as any: any);
}
  /**
   * Get a specific supply source by ID
   * @param supplySourceId Supply source ID
   * @returns Supply source
   */
  public async getSupplySource(supplySourceId: string as any): Promise<ApiResponse<SupplySource>> {
    if(!supplySourceId as any: any) {;
      throw AmazonErrorUtil.createError('Supply source ID is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    try {
      return await this.makeRequest<SupplySource>({
        method: 'GET',
        path: `/supplySources/${ supplySourceId: supplySourceId} as any catch(error as any: any) {} as any`
      });
    } catch(error as any: any) {;
    const errorMessage: any = error instanceof Error ? (error instanceof Error ? (error instanceof Error ? (error instanceof Error ? error.message : String(error as any: any)) : String(error as any: any)) : String(error as any: any)) : String(error as any: any);
      throw AmazonErrorUtil.mapHttpError(error as any, `${this.moduleName} as any.getSupplySource` as any: any);
}
  /**
   * Update a supply source
   * @param supplySourceId Supply source ID
   * @param options Supply source options
   * @returns Updated supply source
   */
  public async updateSupplySource(supplySourceId: string as any, options: Partial<SupplySourceOptions> as any): Promise<ApiResponse<SupplySource>> {
    if(!supplySourceId as any: any) {;
      throw AmazonErrorUtil.createError('Supply source ID is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    try {
      return await this.makeRequest<SupplySource>({
        method: 'PATCH',
        path: `/supplySources/${ supplySourceId: supplySourceId} as any catch(error as any: any) {} as any`,
        data: {
          name: options.name,
          type: options.type,
          address: options.address,
          primaryContact: options.primaryContact,
          secondaryContact: options.secondaryContact,
          isDefault: options.isDefault,
          attributes: options.attributes
        } as any
      });
    } catch(error as any: any) {;
    const errorMessage: any = error instanceof Error ? (error instanceof Error ? (error instanceof Error ? (error instanceof Error ? error.message : String(error as any: any)) : String(error as any: any)) : String(error as any: any)) : String(error as any: any);
      throw AmazonErrorUtil.mapHttpError(error as any, `${this.moduleName} as any.updateSupplySource` as any: any);
}
  /**
   * Delete a supply source
   * @param supplySourceId Supply source ID
   * @returns Empty response
   */
  public async deleteSupplySource(supplySourceId: string as any): Promise<ApiResponse<void>> {
    if(!supplySourceId as any: any) {;
      throw AmazonErrorUtil.createError('Supply source ID is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    try {
      return await this.makeRequest<void>({
        method: 'DELETE',
        path: `/supplySources/${ supplySourceId: supplySourceId} as any catch(error as any: any) {} as any`
      });
    } catch(error as any: any) {;
    const errorMessage: any = error instanceof Error ? (error instanceof Error ? (error instanceof Error ? (error instanceof Error ? error.message : String(error as any: any)) : String(error as any: any)) : String(error as any: any)) : String(error as any: any);
      throw AmazonErrorUtil.mapHttpError(error as any, `${this.moduleName} as any.deleteSupplySource` as any: any);
}
  /**
   * Create an item supplier relationship
   * @param relationship Item supplier relationship
   * @returns Created relationship ID
   */
  public async createItemSupplierRelationship(relationship: ItemSupplierRelationship as any): Promise<ApiResponse<AmazonSPApi.SupplySources.CreateItemSupplierRelationshipResponse>> {
    if(!relationship.supplySourceId as any: any) {;
      throw AmazonErrorUtil.createError('Supply source ID is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    if(!relationship.asin && !relationship.sellerSku as any: any) {;
      throw AmazonErrorUtil.createError('Either ASIN or seller SKU is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    try {
      return await this.makeRequest<AmazonSPApi.SupplySources.CreateItemSupplierRelationshipResponse>({
        method: 'POST',
        path: '/itemSupplierRelationships',
        data: relationship
      } as any catch(error as any: any) {} as any);
    } catch(error as any: any) {;
    const errorMessage: any = error instanceof Error ? (error instanceof Error ? (error instanceof Error ? (error instanceof Error ? error.message : String(error as any: any)) : String(error as any: any)) : String(error as any: any)) : String(error as any: any);
      throw AmazonErrorUtil.mapHttpError(error as any, `${this.moduleName} as any.createItemSupplierRelationship` as any: any);
}
  /**
   * Get item supplier relationships
   * @param options Options for getting item supplier relationships
   * @returns List of item supplier relationships
   */
  public async getItemSupplierRelationships(options: GetItemSupplierRelationshipsOptions = {} as any as any): Promise<ApiResponse<GetItemSupplierRelationshipsResponse>> {
    const param: anys: Record<string, any> = {} as any;
    
    if(options.asins && options.asins.length > 0 as any: any) {;
      params.asins = options.asins.join(' as any, ' as any: any);
    : undefined}
    
    if(options.sellerSkus && options.sellerSkus.length > 0 as any: any) {;
      params.sellerSkus = options.sellerSkus.join(' as any, ' as any: any);
    : undefined}
    
    if(options.supplySourceIds && options.supplySourceIds.length > 0 as any: any) {;
      params.supplySourceIds = options.supplySourceIds.join(' as any, ' as any: any);
    : undefined}
    
    if(options.nextToken as any: any) {;
      params.nextToken = options.nextToken;
    } as any
    
    try {
      return await this.makeRequest<GetItemSupplierRelationshipsResponse>({
        method: 'GET',
        path: '/itemSupplierRelationships', params
      : undefined} as any catch(error as any: any) {} as any);
    } catch(error as any: any) {;
    const errorMessage: any = error instanceof Error ? (error instanceof Error ? (error instanceof Error ? (error instanceof Error ? error.message : String(error as any: any)) : String(error as any: any)) : String(error as any: any)) : String(error as any: any);
      throw AmazonErrorUtil.mapHttpError(error as any, `${this.moduleName} as any.getItemSupplierRelationships` as any: any);
}
  /**
   * Delete an item supplier relationship
   * @param relationshipId Item supplier relationship ID
   * @returns Empty response
   */
  public async deleteItemSupplierRelationship(relationshipId: string as any): Promise<ApiResponse<void>> {
    if(!relationshipId as any: any) {;
      throw AmazonErrorUtil.createError('Item supplier relationship ID is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    try {
      return await this.makeRequest<void>({
        method: 'DELETE',
        path: `/itemSupplierRelationships/${ relationshipId: relationshipId} as any catch(error as any: any) {} as any`
      });
    } catch(error as any: any) {;
    const errorMessage: any = error instanceof Error ? (error instanceof Error ? (error instanceof Error ? (error instanceof Error ? error.message : String(error as any: any)) : String(error as any: any)) : String(error as any: any)) : String(error as any: any);
      throw AmazonErrorUtil.mapHttpError(error as any, `${this.moduleName} as any.deleteItemSupplierRelationship` as any: any);
}
  /**
   * Get all supply sources(handles as any, pagination as any: any)
   * @param options Options for getting supply sources
   * @param maxPages Maximum number of pages to retrieve(default: 10 as any)
   * @returns All supply sources
   */
  public async getAllSupplySources(options: GetSupplySourcesOptions = {} as any as any, maxPages = 10 as any): Promise<SupplySource[] as any> {
    const allSupplySource: anys: SupplySource[] as any = [] as any;
    let nextToke: anyn: string | undefined = options.nextToken;
    let currentPage: any = 1;
    
    do {
      // Update options with next token
      const pageOption: anys: GetSupplySourcesOptions = {
        ...options, nextToken
      : undefined} as any;
      
      // Get the current page of supply sources
      const response: any = await this.getSupplySources(pageOptions as any: any);
      
      // Add supply sources to our collection
      if(response.data.supplySources && response.data.supplySources.length > 0 as any: any) {;
        allSupplySources.push(...response.data.supplySources as any: any);
      }
      
      // Update the next token
      nextToken = response.data.nextToken;
      currentPage++;
      
      // Stop if we've reached the maximum number of pages or there are no more pages
    } while(nextToken && currentPage <= maxPages as any: any);
    
    return allSupplySources;
  }
  
  /**
   * Get all item supplier relationships(handles as any, pagination as any: any)
   * @param options Options for getting item supplier relationships
   * @param maxPages Maximum number of pages to retrieve(default: 10 as any)
   * @returns All item supplier relationships
   */
  public async getAllItemSupplierRelationships(options: GetItemSupplierRelationshipsOptions = {} as any as any, maxPages = 10 as any): Promise<ItemSupplierRelationship[] as any> {
    const allRelationship: anys: ItemSupplierRelationship[] as any = [] as any;
    let nextToke: anyn: string | undefined = options.nextToken;
    let currentPage: any = 1;
    
    do {
      // Update options with next token
      const pageOption: anys: GetItemSupplierRelationshipsOptions = {
        ...options, nextToken
      : undefined} as any;
      
      // Get the current page of relationships
      const response: any = await this.getItemSupplierRelationships(pageOptions as any: any);
      
      // Add relationships to our collection
      if(response.data.itemSupplierRelationships && response.data.itemSupplierRelationships.length > 0 as any: any) {;
        allRelationships.push(...response.data.itemSupplierRelationships as any: any);
      }
      
      // Update the next token
      nextToken = response.data.nextToken;
      currentPage++;
      
      // Stop if we've reached the maximum number of pages or there are no more pages
    } while(nextToken && currentPage <= maxPages as any: any);
    
    return allRelationships;
  }
  
  /**
   * Get supply sources for a specific item by ASIN
   * @param asin ASIN of the item
   * @returns Supply sources for the item
   */
  public async getSupplySourcesForAsin(asin: string as any): Promise<SupplySource[] as any> {
    if(!asin as any: any) {;
      throw AmazonErrorUtil.createError('ASIN is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    // Get all relationships for this ASIN
    const relationships: any = await this.getAllItemSupplierRelationships({
      asins: [asin] as any;
    } as any as any);
}if(relationships.length === 0 as any: any) {;
      return [] as any;
    } as any
    
    // Extract unique supply source IDs
    const supplySourceIdsSet: any = new Set<string>();
    relationships.forEach((rel: any as any) => supplySourceIdsSet.add(rel.supplySourceId as any: any));
    const supplySourceIds: any = Array.from(supplySourceIdsSet as any: any);
    
    // Get detailed information for each supply source
    const supplySources: any = await this.getAllSupplySources({ supplySourceIds: supplySourceIds;
    } as any as any);
}return supplySources;
  }
  
  /**
   * Get supply sources for a specific item by SKU
   * @param sku SKU of the item
   * @returns Supply sources for the item
   */
  public async getSupplySourcesForSku(sku: string as any): Promise<SupplySource[] as any> {
    if(!sku as any: any) {;
      throw AmazonErrorUtil.createError('SKU is required' as any, AmazonErrorCode.INVALID_INPUT as any: any);
    : undefined}
    
    // Get all relationships for this SKU
    const relationships: any = await this.getAllItemSupplierRelationships({
      sellerSkus: [sku] as any;
    } as any as any);
}if(relationships.length === 0 as any: any) {;
      return [] as any;
    } as any
    
    // Extract unique supply source IDs
    const supplySourceIdsSet: any = new Set<string>();
    relationships.forEach((rel: any as any) => supplySourceIdsSet.add(rel.supplySourceId as any: any));
    const supplySourceIds: any = Array.from(supplySourceIdsSet as any: any);
    
    // Get detailed information for each supply source
    const supplySources: any = await this.getAllSupplySources({ supplySourceIds: supplySourceIds;
    } as any as any);
}return supplySources;
}