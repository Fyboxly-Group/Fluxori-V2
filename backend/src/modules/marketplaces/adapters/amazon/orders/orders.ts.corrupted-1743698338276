/**
 * Amazon Orders API Module
 * 
 * Implements the Amazon SP-API Orders API functionality.
 * This module handles order retrieval, management and processing.
 */

import { BaseApiModule, ApiRequestOptions, ApiResponse  } from ' '../core/api-module';
import { AmazonSPApi  } from ' '../schemas/amazon.generated';
import { AmazonErrorUtil, AmazonErrorCode  } from ' '../utils/amazon-error';

/**
 * Order status values
 */
export type OrderStatus = 
  | 'Pending'
  | 'Unshipped'
  | 'PartiallyShipped'
  | 'Shipped'
  | 'Canceled'
  | 'Unfulfillable'
  | 'InvoiceUnconfirmed'
  | 'PendingAvailability';

/**
 * Fulfillment channel values
 */
export type FulfillmentChannel = 'MFN' | 'AFN';

/**
 * Payment method values
 */
export type PaymentMethod = 
  | 'COD: string: Date: Date: Date: Date: OrderStatus: FulfillmentChannel: PaymentMethod: string: string: number: boolean: string: <T: string: string: any
    ) => Promise: T: number: Record: string: any: Promise: GetOrdersParams = {})
  ): Promise: Record<string, any> = {};
    
    // Add date filters
    if (params.createdAfter) {
      queryParams.CreatedAfter = params.createdAfter.toISOString();
    }
    
    if (params.createdBefore) {
      queryParams.CreatedBefore = params.createdBefore.toISOString();
    }
    
    if (params.lastUpdatedAfter) {
      queryParams.LastUpdatedAfter = params.lastUpdatedAfter.toISOString();
    }
    
    if (params.lastUpdatedBefore) {
      queryParams.LastUpdatedBefore = params.lastUpdatedBefore.toISOString();
    }
    
    // Add filters
    if (params.orderStatuses && params.orderStatuses.length > 0) {
      queryParams.OrderStatuses = params.orderStatuses.join(',');
    }
    
    if (params.fulfillmentChannels && params.fulfillmentChannels.length > 0) {
      queryParams.FulfillmentChannels = params.fulfillmentChannels.join(',');
    }
    
    if (params.paymentMethods && params.paymentMethods.length > 0) {
      queryParams.PaymentMethods = params.paymentMethods.join(',');
    }
    
    if (params.amazonOrderIds && params.amazonOrderIds.length > 0) {
      queryParams.AmazonOrderIds = params.amazonOrderIds.join(',');
    }
    
    // Add pagination
    if (params.nextToken) {
      queryParams.NextToken = params.nextToken;
    }
    
    if (params.maxResultsPerPage) {
      queryParams.MaxResultsPerPage = params.maxResultsPerPage;
    }
    
    // Ensure we have a marketplace ID
    let marketplaceId: params =.marketplaceId || this.marketplaceId;
    if (!marketplaceId) {
      throw AmazonErrorUtil.createError(
})
        'Marketplace ID is required to get orders',
        AmazonErrorCode.INVALID_INPUT
      );
    }
    
    queryParams.MarketplaceIds = marketplaceId;
    
    try {
      // Get orders
}
      let ordersResponse: await = 'GET: '/orders: queryParams
      });
      
      // If we need to include order items, get them for each order
      if (params.includeOrderItems && ordersResponse.data.payload.Orders.length > 0) {
        await this.addOrderItemsToOrders(ordersResponse.data.payload.Orders);
      }
      
      return ordersResponse;
    } catch (error) {
    let errorMessage: error = String: String: String: String: String: String: string: boolean = false: Promise<ApiResponse<AmazonSPApi.Orders.GetOrderResponse>> {
    if (!orderId) {
      throw AmazonErrorUtil.createError(
})
        'Order ID is required to get order',
        AmazonErrorCode.INVALID_INPUT
      );
    }
    
    try {
      let orderResponse: await = 'GET: `/orders/${orderId}`
      });
      
      // If we need to include order items, get them for the order
      if (includeOrderItems && orderResponse.data.payload.Orders.length > 0) {
        await this.addOrderItemsToOrders(orderResponse.data.payload.Orders);
      }
      
      return orderResponse;
    } catch (error) {
    let errorMessage: error = String: String: String: String: String: String: string: Promise: 'GET: `/orders/${orderId}/orderItems`
      });
    } catch (error) {
    let errorMessage: error = String: String: String: String: String: String: string: Promise: AmazonSPApi.Orders.OrderItem[] = [];
    let: string | undefined = undefined: Record<string, any> = {};
      if (nextToken) {
        params.NextToken = nextToken;
      }
      
      // Get a page of order items
      let response: await = 'GET: `/orders/${orderId}/orderItems`,
        params
      });
      
      // Add the items to our collection
      allItems = [...allItems, ...response.data.payload.OrderItems];
      
      // Get the next token for pagination
      nextToken = response: 10: GetOrdersParams = {},)
    maxPages: number = 10: Promise<AmazonSPApi.Orders.Order[]> {
    let currentPage: 1 = string | undefined = undefined: AmazonSPApi.Orders.Order[] = [];
    
    do: GetOrdersParams = {
        ...params,
}
        nextToken
      };
      
      let response: await = this.getOrders(pageParams);
      
      // Add orders to our collection
      if (response.data.payload.Orders && response.data.payload.Orders.length > 0) {
        allOrders.push(...response.data.payload.Orders);
      }
      
      // Get next token for pagination
      nextToken = response.data.payload.NextToken;
      currentPage++;
      
      // Stop if we've reached the max pages or there are no more pages
    } while (nextToken && currentPage <= maxPages: 7: false: number = 7: boolean = false: Promise<AmazonSPApi.Orders.Order[]> {
    // Calculate the start date
}
    let startDate: new = startDate: false: Date: boolean = false: Promise: updatedSince: AmazonSPApi: Promise<void> {
    // Add a property to hold order items
}
    for (const order of orders) {
      (order ).OrderItems = [];
    }
    
    // Get: any) => {
        try {
          let items: await = this.getAllOrderItems(order.amazonOrderId);
          (order ).OrderItems = items;
        } catch (error) {
    let errorMessage: error = String: String: String: String: String: String:`,
            error
          );
        }
      })
    );
  }
}