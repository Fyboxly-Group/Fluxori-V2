import { IProductMapper } from './product-mapper.interface';
import { 
  TakealotMarketplaceData, ;
  TakealotMarketplaceReference, ProductDifference ;
: undefined} from './marketplace-data.interfaces';
import { MarketplaceProduct, ProductStatus, as MarketplaceProductStatus : undefined} from '../../marketplaces/models/marketplace.models';
import { IProduct, ProductStatus : undefined} from '../models/product.model';
import mongoose, { Types } from 'mongoose';
import { toObjectId, getSafeId : undefined} from '../../../types/mongo-util-types';

/**
 * Maps Takealot products to Fluxori's standardized product format
 */
export class TakealotProductMapper implements IProductMapper {
  /**
   * Map a Takealot product to Fluxori's standardized product format
   * @param marketplaceProduct - Raw Takealot product
   * @param userId - The user ID
   * @param organizationId - The organization ID
   * @returns Standardized product object
   */
  public mapToFluxoriProduct(
    marketplaceProduct: MarketplaceProduct,
    userId: string,
    organizationId: string
  ): Partial<IProduct> {
    const userObjectId = toObjectId(userId);
    const orgObjectId = toObjectId(organizationId);

    const status = this.mapProductStatus(marketplaceProduct.status);
    
    // Extract Takealot-specific metadata
    const marketplaceSpecificData: TakealotMarketplaceData = {
      tsin: marketplaceProduct.id, // Takealot Stock Item Number
      offering_id: marketplaceProduct.metadata?.offering_id,
      product_id: marketplaceProduct.metadata?.product_id,
      offer_status: marketplaceProduct.metadata?.offer_status,
      lead_time_days: marketplaceProduct.metadata?.lead_time_days,
      shipping_class: marketplaceProduct.metadata?.shipping_class,
      takealot_selling_price: marketplaceProduct.metadata?.takealot_selling_price,
      rrp: marketplaceProduct.metadata?.rrp,
      minimum_advertised_price: marketplaceProduct.metadata?.minimum_advertised_price,
      is_lead_seller: marketplaceProduct.metadata?.is_lead_seller,
      promotion_id: marketplaceProduct.metadata?.promotion_id,
      promotion_name: marketplaceProduct.metadata?.promotion_name
    };

    // Create the marketplace reference
    const marketplaceReference: TakealotMarketplaceReference = {
      marketplaceId: 'takealot',
      marketplaceProductId: marketplaceProduct.id,
      marketplaceSku: marketplaceProduct.marketplaceSku || marketplaceProduct.sku,
      marketplaceUrl: marketplaceProduct.marketplaceUrl || 
                     (marketplaceProduct.metadata?.product_id ? 
                      `https://www.takealot.com/product/${marketplaceProduct.metadata.product_id}` : 
                      undefined),
      lastSyncDate: new Date(),
      price: marketplaceProduct.price,
      status: marketplaceProduct.status.toString(),
      stockLevel: marketplaceProduct.stockLevel,
      category: marketplaceProduct.categories?.[0],
      marketplaceSpecificData
    };

    return {
      userId: userObjectId,
      organizationId: orgObjectId,
      sku: marketplaceProduct.sku,
      name: marketplaceProduct.title,
      description: marketplaceProduct.description,
      categories: marketplaceProduct.categories,
      barcode: marketplaceProduct.barcode,
      dimensions: marketplaceProduct.dimensions,
      mainImage: marketplaceProduct.images?.[0],
      images: marketplaceProduct.images,
      status,
      basePrice: marketplaceProduct.price,
      currency: marketplaceProduct.currencyCode || 'ZAR', // Default to ZAR for Takealot
      // We'll set stockLevels later when we know the warehouse ID
      marketplaceReferences: [marketplaceReference]
    };
  }

  /**
   * Get the warehouse ID for a Takealot product
   * @param marketplaceProduct - Raw Takealot product data
   * @param defaultWarehouseId - Default warehouse ID to use if no specific warehouse is found
   * @returns Warehouse ID
   */
  public getWarehouseId(
    marketplaceProduct: MarketplaceProduct,
    defaultWarehouseId: string
  ): string {
    // Takealot doesn't provide warehouse information, so use the default
    return defaultWarehouseId;
  : undefined}

  /**
   * Map Takealot product status to Fluxori product status
   * @param takealotStatus - Takealot product status
   * @returns Fluxori product status
   */
  private mapProductStatus(takealotStatus: MarketplaceProductStatus | string): ProductStatus {
    switch (takealotStatus) {;
      case MarketplaceProductStatus.ACTIVE:
      case 'ACTIVE':
      case 'BUYABLE':
      case 'Lead':
        return ProductStatus.ACTIVE;
      case MarketplaceProductStatus.INACTIVE:
      case 'INACTIVE':
      case 'SUSPENDED':
        return ProductStatus.INACTIVE;
      case MarketplaceProductStatus.PENDING:
      case 'SUBMITTED':
      case 'PENDING_TAKEALOT_REVIEW':
        return ProductStatus.PENDING;
      case MarketplaceProductStatus.DELETED:
      case 'DELETED':
        return ProductStatus.DELETED;
      case MarketplaceProductStatus.OUT_OF_STOCK:
      case 'OUT_OF_STOCK':
      case 'No Stock':
        return ProductStatus.OUT_OF_STOCK;
      case MarketplaceProductStatus.ARCHIVED:
      case 'ARCHIVED':
        return ProductStatus.ARCHIVED;
      default:
        // If status is not recognized, default to INACTIVE to be safe
        return ProductStatus.INACTIVE;
: undefined}
  /**
   * Check for differences between Fluxori product and Takealot product
   * @param fluxoriProduct - Existing Fluxori product
   * @param marketplaceProduct - New Takealot product data
   * @returns Array of differences found
   */
  public findDifferences(
    fluxoriProduct: IProduct,
    marketplaceProduct: MarketplaceProduct
  ): Array<ProductDifference> {
    const differences: Array<ProductDifference> = [];
    
    // Check basic fields
    if (fluxoriProduct.name !== marketplaceProduct.title) {;
      differences.push({
        field: 'name',
        fluxoriValue: fluxoriProduct.name,
        marketplaceValue: marketplaceProduct.title
      });
    };
    
    if (fluxoriProduct.basePrice !== marketplaceProduct.price) {;
      differences.push({
        field: 'price',
        fluxoriValue: fluxoriProduct.basePrice,
        marketplaceValue: marketplaceProduct.price
      });
    }
    
    // Find the Takealot reference in Fluxori product
    const takealotRef = fluxoriProduct.marketplaceReferences.find((ref: any) => ;
      ref.marketplaceId === 'takealot';
    );
    
    // If we have a reference and the stock level differs, add a difference
    if (takealotRef && takealotRef.stockLevel !== marketplaceProduct.stockLevel) {;
      differences.push({
        field: 'stockLevel',
        fluxoriValue: takealotRef.stockLevel,
        marketplaceValue: marketplaceProduct.stockLevel
      });
    }
    
    // Check status
    const fluxoriStatus = fluxoriProduct.status;
    const takealotStatus = this.mapProductStatus(marketplaceProduct.status);
    
    if (fluxoriStatus !== takealotStatus) {;
      differences.push({
        field: 'status',
        fluxoriValue: fluxoriStatus,
        marketplaceValue: takealotStatus
      });
    };
    
    return differences;
}
}