// @ts-nocheck
import { Express, Request, Response } from 'express';
import session from 'express-session';
import cors from 'cors';
import bodyParser from 'body-parser';
import compression from 'compression';
import helmet from 'helmet';
import morgan from 'morgan';
import cookieParser from 'cookie-parser';
import passport from 'passport';
import express from 'express';
import swaggerUi from 'swagger-ui-express';
import { swaggerDocument } from '../../config/swagger';
import mongoose from 'mongoose';
import logger from '../../config/logger';
import { authRoutes } from '../../routes/auth.route';
import { exampleRoutes } from '../../routes/example.route';
import { customerRoutes } from '../../routes/customer.route';
import { uploadRoutes } from '../../routes/upload.route';
import { dashboardRoutes } from '../../routes/dashboard.route';
import { inventoryRoutes } from '../../routes/inventory.route';
import { projectRoutes } from '../../routes/project.route';
import { taskRoutes } from '../../routes/task.route';
import { milestoneRoutes } from '../../routes/milestone.route';
import { shipmentRoutes } from '../../routes/shipment.route';
import { warehouseRoutes } from '../../routes/warehouse.route';
import webhookRoutes from '../../routes/webhook.route';
import inventoryStockRoutes from '../../routes/inventory-stock.route';
import inventoryAlertRoutes from '../../routes/inventory-alert.route';
import analyticsRoutes from '../../routes/analytics.route';
import appConfig from '../../config';
import { errorHandler } from '../../middleware/error.middleware';
import { requestLogger } from '../../middleware/logging.middleware';
import { setupPassport } from '../../config/passport';

/**
 * Create a test instance of the Express app with all middleware and routes
 * @returns Express application instance
 */
export function createTestApp(options: {
  enableLogging?: boolean,
  enableDatabase?: boolean,
  enableAuth?: boolean,
  enableErrorHandler?: boolean,
} = {}): Express {
  // Apply defaults
  const opts = {
    enableLogging: false,
    enableDatabase: false,
    enableAuth: true,
    enableErrorHandler: true,
    ...options,
  };

  // Create Express instance
  const app = express();

  // Standard middleware
  app.use(cors());
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));
  app.use(compression());
  app.use(helmet());
  app.use(cookieParser());

  // Logging middleware (optional)
  if (opts.enableLogging) {
    app.use(morgan('dev'));
    app.use(requestLogger);
  }

  // Session and auth middleware (optional)
  if (opts.enableAuth) {
    app.use(session({
      secret: appConfig.jwt.secret,
      resave: false,
      saveUninitialized: false,
    }));
    app.use(passport.initialize());
    app.use(passport.session());
    setupPassport(passport);
  }

  // Database connection (optional)
  if (opts.enableDatabase) {
    mongoose.connect(appConfig.mongodb.uri)
      .then(() => {
        logger.info('MongoDB connected successfully');
      })
      .catch((err) => {
        logger.error('MongoDB connection error:', err);
      });
  }

  // API documentation
  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

  // API routes
  app.use('/api/auth', authRoutes);
  app.use('/api/examples', exampleRoutes);
  app.use('/api/customers', customerRoutes);
  app.use('/api/upload', uploadRoutes);
  app.use('/api/dashboard', dashboardRoutes);
  app.use('/api/inventory', inventoryRoutes);
  app.use('/api/projects', projectRoutes);
  app.use('/api/tasks', taskRoutes);
  app.use('/api/milestones', milestoneRoutes);
  app.use('/api/shipments', shipmentRoutes);
  app.use('/api/warehouses', warehouseRoutes);
  app.use('/api/webhooks', webhookRoutes);
  app.use('/api/inventory-stock', inventoryStockRoutes);
  app.use('/api/inventory-alerts', inventoryAlertRoutes);
  app.use('/api/analytics', analyticsRoutes);

  // Error handling middleware (optional)
  if (opts.enableErrorHandler) {
    app.use(errorHandler);
  }

  return app;
}

/**
 * Creates a simple mock request object for testing
 * @param overrides Properties to override in the mock request
 * @returns Mock request object
 */
export function createMockRequest(overrides: Partial<Request> = {}): Request {
  const req = {
    body: {},
    params: {},
    query: {},
    headers: {},
    cookies: {},
    session: {},
    user: null,
    ...overrides,
  } as Request;

  return req;
}

/**
 * Creates a simple mock response object for testing
 * @returns Mock response object with jest mocks for common methods
 */
export function createMockResponse(): Response {
  const res = {} as Response;
  
  // Status method returns this for chaining
  res.status = jest.fn().mockReturnThis();
  
  // Response methods
  res.json = jest.fn();
  res.send = jest.fn();
  res.end = jest.fn();
  res.sendStatus = jest.fn();
  res.redirect = jest.fn();
  res.render = jest.fn();
  res.type = jest.fn().mockReturnThis();
  res.format = jest.fn();
  res.cookie = jest.fn().mockReturnThis();
  res.clearCookie = jest.fn().mockReturnThis();
  res.location = jest.fn().mockReturnThis();
  res.set = jest.fn().mockReturnThis();
  res.get = jest.fn();
  res.append = jest.fn().mockReturnThis();
  res.attachment = jest.fn().mockReturnThis();
  res.download = jest.fn();
  res.links = jest.fn().mockReturnThis();
  res.locals = {};
  res.headersSent = false;
  
  return res;
}

export default {
  createTestApp,
  createMockRequest,
  createMockResponse,
};