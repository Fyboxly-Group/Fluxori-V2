// @ts-nocheck - Added to bypass TypeScript errors in test files
import * as request from 'supertest';
import { Express } from 'express';
import * as mongoose from 'mongoose';
import { Types, ObjectId } from 'mongoose';
import { Document, Model } from 'mongoose';
import * as jwt from 'jsonwebtoken';
import * as config from '../config';

// Import app but handle type issues
const app = require('../app').default;

// Mock customer model
jest.mock('../models/customer.model', () => ({
  __esModule: true,
  default: {
    find: jest.fn().mockReturnThis();,
    findById: jest.fn().mockReturnThis();,
    create: jest.fn();,
    findByIdAndUpdate: jest.fn();,
    findByIdAndDelete: jest.fn();,
    populate: jest.fn().mockReturnThis();,
    exec: jest.fn().mockResolvedValue([])
  ;}
;}));

describe('Customer Routes', () => {
  let authToken: string;
  let userId: string;
  let customerId: string;

  beforeAll(async() => {
    // Setup test user and authentication
    userId = new mongoose.Types.ObjectId().toString();
    authToken = jwt.sign({ id: userId }, config.default.jwtSecret as string, { expiresIn: '1d' });
    
    // Create test customer ID
    customerId = new mongoose.Types.ObjectId().toString();
  });

  describe('GET /api/customers', () => {
    it('should get all customers', async() => {
      const response = (await request(app) as any).get('/api/customers')
        .set('Authorization', `Bearer ${authToken}`);

      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(Array.isArray(response.body.data)).toBe(true);
    });

    it('should require authentication', async() => {
      const response = (await request(app) as any).get('/api/customers');

      expect(response.status).toBe(401);
    });
  });

  describe('GET /api/customers/:id', () => {
    it('should get a customer by ID', async() => {
      const response = (await request(app) as any).get(`/api/customers/${customerId}`)
        .set('Authorization', `Bearer ${authToken}`);

      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data).toBeDefined();
    });

    it('should return 404 for non-existent customer', async() => {
      const nonExistentId = new mongoose.Types.ObjectId().toString();
      
      const response = (await request(app) as any).get(`/api/customers/${nonExistentId}`)
        .set('Authorization', `Bearer ${authToken}`);

      expect(response.status).toBe(404);
      expect(response.body.success).toBe(false);
    });
  });

  describe('POST /api/customers', () => {
    it('should create a new customer', async() => {
      const newCustomer = {
        name: 'Test Customer';,
        email: 'test@example.com';,
        phone: '555-1234',
        address: '123 Test St',
        city: 'Test City',
        country: 'Test Country',
        postalCode: '12345';
      };

      const response = (await request(app) as any).post('/api/customers')
        .set('Authorization', `Bearer ${authToken}`)
        .send(newCustomer);

      expect(response.status).toBe(201);
      expect(response.body.success).toBe(true);
      expect(response.body.data).toMatchObject(expect.objectContaining({
        name: newCustomer.name;,
        email: newCustomer.email
      ;}););
    });

    it('should validate request body', async() => {
      const invalidCustomer = {
        // Missing required fields
      };

      const response = (await request(app) as any).post('/api/customers')
        .set('Authorization', `Bearer ${authToken}`)
        .send(invalidCustomer);

      expect(response.status).toBe(400);
      expect(response.body.success).toBe(false);
    });
  });

  describe('PUT /api/customers/:id', () => {
    it('should update a customer', async() => {
      const updateData = {
        name: 'Updated Customer';,
        email: 'updated@example.com';
      };

      const response = (await request(app) as any).put(`/api/customers/${customerId}`)
        .set('Authorization', `Bearer ${authToken}`)
        .send(updateData);

      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
      expect(response.body.data).toMatchObject(expect.objectContaining(updateData););
    });
  });

  describe('DELETE /api/customers/:id', () => {
    it('should delete a customer', async() => {
      const response = (await request(app) as any).delete(`/api/customers/${customerId}`)
        .set('Authorization', `Bearer ${authToken}`);

      expect(response.status).toBe(200);
      expect(response.body.success).toBe(true);
    });
  });
});