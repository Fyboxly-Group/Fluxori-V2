import React from 'react';
import {
  Box,
  Card,
  CardHeader,
  CardBody,
  Heading,
  Text,
  Stack,
  Flex,
  Badge,
  Spinner,
  Button,
  Icon,
  Tooltip,
} from '@chakra-ui/react';
import { Divider } from '@chakra-ui/react/divider';
// Mock icons since we don't have the right imports
const CheckCircleIcon = (props: any) => <span {...props}>✓</span>;
const WarningIcon = (props: any) => <span {...props}>⚠</span>;
const RepeatIcon = (props: any) => <span {...props}>↻</span>;
const InfoIcon = (props: any) => <span {...props}>ℹ</span>;
import useConnections from '../hooks/useConnections';
import { ConnectionStatus, SyncStatus, ConnectionStatusResponse } from '../../../api/connections.api';
import { MarketplaceIcon } from '../utils/marketplace-icons';

// Interval to auto-refresh the widget data (30 seconds)
const REFRESH_INTERVAL = 30000;

/**
 * Get color for connection status
 */
const getConnectionStatusColor = (status: ConnectionStatus): string => {
  switch (status) {
    case ConnectionStatus.CONNECTED:
      return 'green';
    case ConnectionStatus.DISCONNECTED:
      return 'red';
    case ConnectionStatus.ERROR:
      return 'red';
    case ConnectionStatus.PENDING:
      return 'yellow';
    case ConnectionStatus.EXPIRED:
      return 'orange';
    default:
      return 'gray';
  }
};

/**
 * Get icon for sync status
 */
const getSyncStatusIcon = (status: string) => {
  switch (status) {
    case SyncStatus.SUCCESS:
      return <CheckCircleIcon color="green.500" />;
    case SyncStatus.ERROR:
      return <WarningIcon color="red.500" />;
    case SyncStatus.SYNCING:
      return <Spinner size="sm" color="blue.500" />;
    case SyncStatus.IDLE:
      return <InfoIcon color="gray.500" />;
    default:
      return <InfoIcon color="gray.500" />;
  }
};

interface MarketplaceSyncStatusWidgetProps {
  title?: string;
  maxItems?: number;
}

export const MarketplaceSyncStatusWidget: React.FC<MarketplaceSyncStatusWidgetProps> = ({
  title = 'Marketplace Sync Status',
  maxItems = 4,
}) => {
  const { useConnectionStatuses } = useConnections();
  const { 
    data: statuses, 
    isLoading, 
    isError, 
    error, 
    refetch 
  } = useConnectionStatuses(REFRESH_INTERVAL);

  const handleRefresh = () => {
    refetch();
  };

  // If there's an error, show error state
  if (isError) {
    return (
      <Card>
        <CardHeader>
          <Flex justifyContent="space-between" alignItems="center">
            <Heading size="md">{title}</Heading>
            <Button size="sm" onClick={handleRefresh} leftIcon={<RepeatIcon />}>
              Retry
            </Button>
          </Flex>
        </CardHeader>
        <CardBody>
          <Text color="red.500">
            Error loading marketplace statuses: {(error as Error)?.message || 'Unknown error'}
          </Text>
        </CardBody>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <Flex justifyContent="space-between" alignItems="center">
          <Heading size="md">{title}</Heading>
          <Button 
            size="sm" 
            onClick={handleRefresh} 
            leftIcon={<RepeatIcon />}
            isLoading={isLoading}
          >
            Refresh
          </Button>
        </Flex>
      </CardHeader>
      <CardBody>
        {isLoading && !statuses ? (
          <Flex justifyContent="center" p={4}>
            <Spinner />
          </Flex>
        ) : !statuses?.length ? (
          <Text>No marketplace connections found. Connect a marketplace to see status here.</Text>
        ) : (
          <Stack spacing={3} divider={<Divider />}>
            {statuses.slice(0, maxItems).map((status: ConnectionStatusResponse) => (
              <Flex key={status.id} alignItems="center" justifyContent="space-between">
                <Flex alignItems="center" gap={3}>
                  <MarketplaceIcon marketplaceId={status.marketplaceId} boxSize={6} />
                  <Box>
                    <Text fontWeight="medium">{status.marketplaceName}</Text>
                    <Text fontSize="sm" color="gray.500">
                      {status.lastSyncTime ? `Last synced: ${status.lastSyncTime}` : 'Never synced'}
                    </Text>
                  </Box>
                </Flex>
                <Flex alignItems="center" gap={2}>
                  <Badge colorScheme={getConnectionStatusColor(status.connectionStatus)}>
                    {status.connectionStatus}
                  </Badge>
                  <Tooltip label={`Sync status: ${status.syncStatus}`}>
                    {getSyncStatusIcon(status.syncStatus as SyncStatus)}
                  </Tooltip>
                </Flex>
              </Flex>
            ))}
            
            {statuses.length > maxItems && (
              <Text fontSize="sm" textAlign="center">
                +{statuses.length - maxItems} more connections
              </Text>
            )}
          </Stack>
        )}
      </CardBody>
    </Card>
  );
};

export default MarketplaceSyncStatusWidget;