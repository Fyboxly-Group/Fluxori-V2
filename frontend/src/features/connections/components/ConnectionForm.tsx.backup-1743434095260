'use client';

import { useState, useEffect } from 'react';
import { Box } from '@chakra-ui/react/box';
import { Button } from '@chakra-ui/react/button';
import { Text } from '@chakra-ui/react/text';
import { Heading } from '@chakra-ui/react/heading';
import { Stack, HStack, VStack, Flex } from '@chakra-ui/react/stack';
import { FormControl, FormLabel, FormHelperText, FormErrorMessage } from '@chakra-ui/react/form-control';
import { Input } from '@chakra-ui/react/input';
import { InputGroup, InputElement } from '@chakra-ui/react/input-group';
import { Checkbox } from '@chakra-ui/react/checkbox';
import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react/modal';
import { Select } from '@chakra-ui/react/select';
import { useColorMode } from '@chakra-ui/react/color-mode';
import { Card, CardBody } from '@chakra-ui/react/card';
import { Divider } from '@chakra-ui/react/divider';
import { Badge } from '@chakra-ui/react/badge';
import { SimpleGrid } from '@chakra-ui/react/simple-grid';
import { 
  Eye, 
  EyeOff, 
  ExternalLink, 
  Key,
  ShieldCheck,
  Store, 
  ShoppingBag, 
  FileInvoice, 
  Package, 
  Globe 
} from 'lucide-react';

import useConnections from '../hooks/useConnections';
import { MarketplaceType, AuthenticationType, CreateConnectionPayload } from '../../../api/connections.api';
import { startOAuthFlow } from '../../../api/connections.api';
import { MarketplaceIcon } from '../utils/marketplace-icons';

interface ConnectionFormProps {
  isOpen: boolean;
  onClose: () => void;
  initialMarketplace?: MarketplaceType;
}

interface MarketplaceOption {
  id: MarketplaceType;
  name: string;
  description: string;
  icon: React.ElementType;
  method: AuthenticationType;
  color: string;
}

/**
 * Component for connecting to a marketplace
 */
export default function ConnectionForm({ isOpen, onClose, initialMarketplace }: ConnectionFormProps) {
  const { colorMode } = useColorMode();
  const { useCreateConnection } = useConnections();
  
  // Available marketplaces with their connection methods
  const marketplaces: MarketplaceOption[] = [
    { 
      id: MarketplaceType.TAKEALOT, 
      name: 'Takealot', 
      description: 'South Africa\'s leading e-commerce platform',
      icon: Package,
      method: AuthenticationType.API_KEY,
      color: '#0077BE'
    },
    { 
      id: MarketplaceType.AMAZON, 
      name: 'Amazon', 
      description: 'Global marketplace for online shopping',
      icon: ShoppingBag,
      method: AuthenticationType.OAUTH,
      color: '#FF9900'
    },
    { 
      id: MarketplaceType.SHOPIFY, 
      name: 'Shopify', 
      description: 'E-commerce platform for online stores',
      icon: Store,
      method: AuthenticationType.API_KEY,
      color: '#95BF47'
    },
    { 
      id: MarketplaceType.XERO, 
      name: 'Xero', 
      description: 'Cloud-based accounting software',
      icon: FileInvoice,
      method: AuthenticationType.OAUTH,
      color: '#13B5EA'
    },
  ];
  
  // Form state
  const [selectedMarketplaceId, setSelectedMarketplaceId] = useState<MarketplaceType | ''>('');
  const [isPasswordVisible, setIsPasswordVisible] = useState(false);
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  
  // Reset the selected marketplace when the form opens/closes or initialMarketplace changes
  useEffect(() => {
    if (isOpen) {
      setSelectedMarketplaceId(initialMarketplace || '');
      resetForm();
    }
  }, [isOpen, initialMarketplace]);
  
  // Form fields based on marketplace
  const [apiKey, setApiKey] = useState('');
  const [apiSecret, setApiSecret] = useState('');
  const [storeId, setStoreId] = useState('');
  const [sellerId, setSellerId] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  
  // State for form submission
  const { mutateAsync: createConnection, isPending } = useCreateConnection();
  
  // Get currently selected marketplace
  const selectedMarketplace = marketplaces.find(m => m.id === selectedMarketplaceId);
  
  // Validate the form
  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};
    
    if (!selectedMarketplaceId) {
      errors.marketplaceId = 'Please select a marketplace';
      return false;
    }
    
    if (selectedMarketplace?.method === AuthenticationType.API_KEY) {
      if (!apiKey) {
        errors.apiKey = 'API Key is required';
      }
      
      if (selectedMarketplaceId === MarketplaceType.TAKEALOT && !apiSecret) {
        errors.apiSecret = 'API Secret is required';
      }
      
      if (selectedMarketplaceId === MarketplaceType.SHOPIFY && !storeId) {
        errors.storeId = 'Store ID/URL is required';
      }
    } else if (selectedMarketplace?.method === AuthenticationType.USERNAME_PASSWORD) {
      if (!username) {
        errors.username = 'Username is required';
      }
      
      if (!password) {
        errors.password = 'Password is required';
      }
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };
  
  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    // For OAuth-based marketplaces, redirect to OAuth flow
    if (selectedMarketplace?.method === AuthenticationType.OAUTH) {
      if (selectedMarketplaceId) {
        // Construct redirect URL (current page)
        const redirectUrl = `${window.location.origin}${window.location.pathname}`;
        startOAuthFlow(selectedMarketplaceId as MarketplaceType, redirectUrl);
      }
      return;
    }
    
    // For API key based marketplaces, create connection directly
    const connectionData: CreateConnectionPayload = {
      marketplaceId: selectedMarketplaceId as MarketplaceType,
      credentials: {},
    };
    
    // Add credentials based on marketplace type
    if (selectedMarketplaceId === MarketplaceType.TAKEALOT) {
      connectionData.credentials = {
        apiKey,
        apiSecret,
      };
      
      if (sellerId) {
        connectionData.metadata = {
          sellerId,
        };
      }
    } else if (selectedMarketplaceId === MarketplaceType.SHOPIFY) {
      connectionData.credentials = {
        apiKey,
        storeId,
      };
      
      // Add metadata for store URL
      connectionData.metadata = {
        storeUrl: storeId,
      };
    } else if (selectedMarketplace?.method === AuthenticationType.USERNAME_PASSWORD) {
      connectionData.credentials = {
        username,
        password,
      };
    }
    
    try {
      await createConnection(connectionData);
      resetForm();
      onClose();
    } catch (error) {
      console.error('Error creating connection:', error);
    }
  };
  
  // Reset form
  const resetForm = () => {
    setApiKey('');
    setApiSecret('');
    setStoreId('');
    setSellerId('');
    setUsername('');
    setPassword('');
    setFormErrors({});
    setIsPasswordVisible(false);
  };
  
  // Handle modal close
  const handleClose = () => {
    resetForm();
    onClose();
  };
  
  return (
    <Modal isOpen={isOpen} onClose={handleClose} size="xl">
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>Connect Marketplace</ModalHeader>
        <ModalCloseButton />
        
        <form onSubmit={handleSubmit}>
          <ModalBody>
            <VStack spacing={6} align="stretch">
              {/* Marketplace Selection */}
              {!selectedMarketplaceId ? (
                <Box>
                  <Text fontWeight="medium" mb={3}>Select a marketplace to connect:</Text>
                  <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
                    {marketplaces.map((marketplace) => (
                      <Card 
                        key={marketplace.id} 
                        variant="outline" 
                        cursor="pointer"
                        onClick={() => setSelectedMarketplaceId(marketplace.id)}
                        borderColor={colorMode === 'light' ? 'gray.200' : 'gray.700'}
                        _hover={{
                          borderColor: marketplace.color,
                          boxShadow: 'md',
                        }}
                      >
                        <CardBody>
                          <HStack spacing={3}>
                            <Box color={marketplace.color}>
                              <marketplace.icon size={24} />
                            </Box>
                            <Box>
                              <Heading size="sm">{marketplace.name}</Heading>
                              <Text fontSize="xs" color="gray.500" mt={1}>
                                {marketplace.description}
                              </Text>
                              <HStack mt={2}>
                                <Badge size="sm" colorScheme={marketplace.method === AuthenticationType.API_KEY ? 'purple' : 'blue'}>
                                  {marketplace.method === AuthenticationType.API_KEY ? 'API Key' : 'OAuth'}
                                </Badge>
                                {/* Additional badges if needed */}
                              </HStack>
                            </Box>
                          </HStack>
                        </CardBody>
                      </Card>
                    ))}
                  </SimpleGrid>
                </Box>
              ) : (
                <>
                  {/* Selected Marketplace Header */}
                  <Box mb={2}>
                    <Button 
                      variant="link" 
                      onClick={() => setSelectedMarketplaceId('')}
                      mb={2}
                    >
                      ‚Üê Back to marketplace selection
                    </Button>
                    
                    <Flex align="center" gap={3}>
                      {selectedMarketplace && (
                        <Box color={selectedMarketplace.color}>
                          <selectedMarketplace.icon size={24} />
                        </Box>
                      )}
                      <Heading size="md">Connect to {selectedMarketplace?.name}</Heading>
                    </Flex>
                    
                    <Text mt={1} fontSize="sm" color="gray.500">
                      {selectedMarketplace?.description}
                    </Text>
                  </Box>
                  
                  <Divider my={3} />
                  
                  {/* OAuth flow explanation */}
                  {selectedMarketplace?.method === AuthenticationType.OAUTH && (
                    <Box 
                      p={4} 
                      borderRadius="md" 
                      bg={colorMode === 'light' ? 'blue.50' : 'blue.900'}
                    >
                      <HStack spacing={3} mb={2}>
                        <ShieldCheck size={20} color={colorMode === 'light' ? 'blue' : 'lightblue'} />
                        <Heading size="sm">Secure OAuth Authentication</Heading>
                      </HStack>
                      <Text fontSize="sm">
                        {selectedMarketplace.name} uses OAuth for secure authentication. When you click "Connect", 
                        you will be redirected to {selectedMarketplace.name}'s website to login and authorize Fluxori.
                      </Text>
                      <Text fontSize="xs" mt={2} fontStyle="italic">
                        No sensitive credentials are stored by Fluxori during this process.
                      </Text>
                    </Box>
                  )}
                  
                  {/* API Key based authentication (Takealot, Shopify) */}
                  {selectedMarketplace?.method === AuthenticationType.API_KEY && (
                    <>
                      <Box 
                        p={4} 
                        borderRadius="md" 
                        bg={colorMode === 'light' ? 'blue.50' : 'blue.900'}
                      >
                        <HStack spacing={3} mb={2}>
                          <Key size={20} color={colorMode === 'light' ? 'blue' : 'lightblue'} />
                          <Heading size="sm">API Key Authentication</Heading>
                        </HStack>
                        <Text fontSize="sm">
                          Please enter your {selectedMarketplace.name} API credentials. These credentials 
                          will be securely encrypted and stored.
                        </Text>
                      </Box>
                      
                      <FormControl isInvalid={!!formErrors.apiKey} isRequired mt={3}>
                        <FormLabel>API Key</FormLabel>
                        <InputGroup>
                          <Input
                            type={isPasswordVisible ? 'text' : 'password'}
                            value={apiKey}
                            onChange={(e) => setApiKey(e.target.value)}
                            placeholder="Enter API key"
                          />
                          <InputElement placement="right">
                            <Button
                              size="sm"
                              onClick={() => setIsPasswordVisible(!isPasswordVisible)}
                              variant="ghost"
                            >
                              {isPasswordVisible ? <EyeOff size={16} /> : <Eye size={16} />}
                            </Button>
                          </InputElement>
                        </InputGroup>
                        {formErrors.apiKey && (
                          <FormErrorMessage>{formErrors.apiKey}</FormErrorMessage>
                        )}
                      </FormControl>
                      
                      {/* Takealot specific fields */}
                      {selectedMarketplaceId === MarketplaceType.TAKEALOT && (
                        <>
                          <FormControl isInvalid={!!formErrors.apiSecret} isRequired mt={3}>
                            <FormLabel>API Secret</FormLabel>
                            <InputGroup>
                              <Input
                                type={isPasswordVisible ? 'text' : 'password'}
                                value={apiSecret}
                                onChange={(e) => setApiSecret(e.target.value)}
                                placeholder="Enter API secret"
                              />
                              <InputElement placement="right">
                                <Button
                                  size="sm"
                                  onClick={() => setIsPasswordVisible(!isPasswordVisible)}
                                  variant="ghost"
                                >
                                  {isPasswordVisible ? <EyeOff size={16} /> : <Eye size={16} />}
                                </Button>
                              </InputElement>
                            </InputGroup>
                            {formErrors.apiSecret && (
                              <FormErrorMessage>{formErrors.apiSecret}</FormErrorMessage>
                            )}
                          </FormControl>
                          
                          <FormControl mt={3}>
                            <FormLabel>Seller ID (Optional)</FormLabel>
                            <Input
                              type="text"
                              value={sellerId}
                              onChange={(e) => setSellerId(e.target.value)}
                              placeholder="Enter your seller ID"
                            />
                            <FormHelperText>
                              If you have multiple seller accounts, enter the specific ID
                            </FormHelperText>
                          </FormControl>
                        </>
                      )}
                      
                      {/* Shopify specific fields */}
                      {selectedMarketplaceId === MarketplaceType.SHOPIFY && (
                        <FormControl isInvalid={!!formErrors.storeId} isRequired mt={3}>
                          <FormLabel>Store URL</FormLabel>
                          <Input
                            type="text"
                            value={storeId}
                            onChange={(e) => setStoreId(e.target.value)}
                            placeholder="your-store.myshopify.com"
                          />
                          <FormHelperText>
                            Enter your full Shopify store URL
                          </FormHelperText>
                          {formErrors.storeId && (
                            <FormErrorMessage>{formErrors.storeId}</FormErrorMessage>
                          )}
                        </FormControl>
                      )}
                    </>
                  )}
                  
                  {/* Username/Password based authentication */}
                  {selectedMarketplace?.method === AuthenticationType.USERNAME_PASSWORD && (
                    <>
                      <FormControl isInvalid={!!formErrors.username} isRequired>
                        <FormLabel>Username</FormLabel>
                        <Input
                          type="text"
                          value={username}
                          onChange={(e) => setUsername(e.target.value)}
                          placeholder="Enter username"
                        />
                        {formErrors.username && (
                          <FormErrorMessage>{formErrors.username}</FormErrorMessage>
                        )}
                      </FormControl>
                      
                      <FormControl isInvalid={!!formErrors.password} isRequired mt={3}>
                        <FormLabel>Password</FormLabel>
                        <InputGroup>
                          <Input
                            type={isPasswordVisible ? 'text' : 'password'}
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            placeholder="Enter password"
                          />
                          <InputElement placement="right">
                            <Button
                              size="sm"
                              onClick={() => setIsPasswordVisible(!isPasswordVisible)}
                              variant="ghost"
                            >
                              {isPasswordVisible ? <EyeOff size={16} /> : <Eye size={16} />}
                            </Button>
                          </InputElement>
                        </InputGroup>
                        {formErrors.password && (
                          <FormErrorMessage>{formErrors.password}</FormErrorMessage>
                        )}
                      </FormControl>
                    </>
                  )}
                </>
              )}
              
              {/* Security note */}
              {selectedMarketplaceId && selectedMarketplace?.method !== AuthenticationType.OAUTH && (
                <Box 
                  p={4} 
                  borderRadius="md" 
                  bg={colorMode === 'light' ? 'yellow.50' : 'yellow.900'}
                  mt={3}
                >
                  <Text fontSize="sm">
                    <strong>Note:</strong> All credentials are securely stored and encrypted. 
                    Fluxori only uses these credentials to connect to {selectedMarketplace?.name} 
                    on your behalf and will never share them with third parties.
                  </Text>
                </Box>
              )}
            </VStack>
          </ModalBody>
          
          <ModalFooter>
            <HStack spacing={3}>
              <Button variant="ghost" onClick={handleClose}>
                Cancel
              </Button>
              
              {selectedMarketplaceId ? (
                <Button 
                  colorScheme="blue" 
                  type="submit"
                  isLoading={isPending}
                  leftIcon={selectedMarketplace?.method === AuthenticationType.OAUTH ? 
                    <ExternalLink size={16} /> : undefined}
                >
                  {selectedMarketplace?.method === AuthenticationType.OAUTH ? 'Continue to Authorization' : 'Connect'}
                </Button>
              ) : (
                <Button 
                  colorScheme="blue" 
                  isDisabled={true}
                >
                  Select a Marketplace
                </Button>
              )}
            </HStack>
          </ModalFooter>
        </form>
      </ModalContent>
    </Modal>
  );
}