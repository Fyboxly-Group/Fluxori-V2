name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  IMAGE_NAME: fluxori-frontend

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: npm run lint
      
      - name: Type check
        run: npm run typecheck
      
      - name: Run tests
        run: npm test
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: https://fluxori-backend-dummy-url.a.run.app
          NEXT_PUBLIC_ENVIRONMENT: test
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/.next
  
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io
      
      - name: Get environment name
        id: env-name
        run: |
          if [ ${{ github.ref }} = 'refs/heads/main' ]; then
            echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
            echo "API_URL=${{ secrets.PROD_API_URL }}" >> $GITHUB_OUTPUT
          else
            echo "ENV_NAME=staging" >> $GITHUB_OUTPUT
            echo "API_URL=${{ secrets.STAGING_API_URL }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build frontend with environment variables
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ steps.env-name.outputs.ENV_NAME }}
            gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_API_URL=${{ steps.env-name.outputs.API_URL }}
            NEXT_PUBLIC_ENVIRONMENT=${{ steps.env-name.outputs.ENV_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.GCP_SA_KEY }}
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Get environment name
        id: env-name
        run: |
          if [ ${{ github.ref }} = 'refs/heads/main' ]; then
            echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV_NAME=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: fluxori-frontend
          image: gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ steps.env-name.outputs.ENV_NAME }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          region: us-central1
  
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Get environment name
        id: env-name
        run: |
          if [ ${{ github.ref }} = 'refs/heads/main' ]; then
            echo "ENV_NAME=Production" >> $GITHUB_OUTPUT
          else
            echo "ENV_NAME=Staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Frontend Deployment Result: ${{ needs.deploy.result == 'success' && 'Success ✅' || 'Failed ❌' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Frontend Deployment to ${{ steps.env-name.outputs.ENV_NAME }}: ${{ needs.deploy.result == 'success' && 'Success ✅' || 'Failed ❌' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ steps.env-name.outputs.ENV_NAME }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK