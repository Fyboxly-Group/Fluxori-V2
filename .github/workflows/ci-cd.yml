name: Fluxori CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        package: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.package }}/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.package }}
          npm ci
      
      - name: Run linting
        run: |
          cd ${{ matrix.package }}
          npm run lint
      
      - name: Run tests
        run: |
          cd ${{ matrix.package }}
          npm test
  
  build-and-push:
    name: Build and Push Docker Image
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        package: [frontend, backend]
        include:
          - package: frontend
            service: fluxori-frontend
          - package: backend
            service: fluxori-backend
    
    env:
      REGISTRY: gcr.io
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Configure Docker to use Google Cloud
        run: gcloud auth configure-docker
      
      - name: Determine tag
        id: tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "TAG=production" >> $GITHUB_OUTPUT
          else
            echo "TAG=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Build Docker image
        run: |
          cd ${{ matrix.package }}
          docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ steps.tag.outputs.TAG }} \
                      -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ github.sha }} .
      
      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ steps.tag.outputs.TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ matrix.service }}:${{ github.sha }}
  
  deploy:
    name: Deploy to Environment
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"
      
      - name: Terraform Init
        working-directory: infrastructure/terraform/environments/${{ steps.env.outputs.ENVIRONMENT }}
        run: terraform init
      
      - name: Terraform Validate
        working-directory: infrastructure/terraform/environments/${{ steps.env.outputs.ENVIRONMENT }}
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: infrastructure/terraform/environments/${{ steps.env.outputs.ENVIRONMENT }}
        run: |
          terraform plan \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="mongodb_uri=${{ secrets.MONGODB_URI }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -out=tfplan
      
      - name: Terraform Apply
        working-directory: infrastructure/terraform/environments/${{ steps.env.outputs.ENVIRONMENT }}
        run: terraform apply -auto-approve tfplan
  
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies for frontend
        run: |
          cd frontend
          npm ci
      
      - name: Install dependencies for backend
        run: |
          cd backend
          npm ci
      
      - name: Run npm audit for frontend
        run: |
          cd frontend
          npm audit --production || echo "Frontend vulnerabilities found"
      
      - name: Run npm audit for backend
        run: |
          cd backend
          npm audit --production || echo "Backend vulnerabilities found"
      
      - name: Install OWASP Dependency-Check
        run: |
          mkdir -p $HOME/tools
          wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
          unzip -q dependency-check-8.4.0-release.zip -d $HOME/tools
          rm dependency-check-8.4.0-release.zip
      
      - name: Run Dependency-Check
        run: |
          $HOME/tools/dependency-check/bin/dependency-check.sh \
            --scan frontend/package.json backend/package.json \
            --out security-reports \
            --format "HTML" "JSON"
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: security-reports/