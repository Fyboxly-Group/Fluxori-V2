name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend-cicd.yml'
  # Uncomment below for staging/production deployment
  # tags:
  #   - 'v*-staging' # For staging deployment
  #   - 'v*' # For production deployment (without -staging suffix)

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  ARTIFACT_REGISTRY: ${{ secrets.GCP_ARTIFACT_REGISTRY }}
  SERVICE_NAME: fluxori-backend-dev # Default to dev environment

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test:ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            backend/dist
            backend/package.json
            backend/package-lock.json
            backend/Dockerfile
          retention-days: 1

  deploy:
    name: Deploy to Google Cloud Run
    needs: test-and-build
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker to use gcloud credentials
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Set environment based on branch/tag
        id: set_env
        run: |
          if [[ $GITHUB_REF == refs/tags/v*-staging ]]; then
            echo "SERVICE_NAME=fluxori-backend-staging" >> $GITHUB_ENV
            echo "Environment set to staging"
          elif [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "SERVICE_NAME=fluxori-backend-prod" >> $GITHUB_ENV
            echo "Environment set to production"
          else
            echo "Environment set to development (default)"
          fi

      - name: Build and push Docker image
        working-directory: ./backend
        run: |
          # Extract version or use commit SHA for development
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          
          # Build and tag Docker image
          IMAGE_NAME=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/fluxori-backend:$VERSION
          
          echo "Building image: $IMAGE_NAME"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          
          # Save the image URL for deployment
          echo "IMAGE_URL=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.IMAGE_URL }}
          region: ${{ env.GCP_REGION }}
          env_vars: |
            NODE_ENV=production
            GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
          secrets: |
            JWT_SECRET=jwt-secret:latest
            DB_URL=db-url:latest

      - name: Verify deployment
        run: |
          gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.GCP_REGION }} --format='value(status.url)'
          echo "Service deployed successfully to ${{ steps.deploy.outputs.url }}"

      - name: Set up vulnerability scanning
        run: |
          gcloud artifacts docker images scan ${{ env.IMAGE_URL }} \
            --format='value(response.scan)' \
            --location=${{ env.GCP_REGION }}

  notify:
    name: Notify deployment status
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.deploy.result == 'success' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "✅ Successfully deployed backend to ${{ env.SERVICE_NAME }} environment!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Successfully deployed backend to ${{ env.SERVICE_NAME }} environment!*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch/Tag:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify failure
        if: ${{ needs.deploy.result != 'success' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "❌ Backend deployment to ${{ env.SERVICE_NAME }} environment failed!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *Backend deployment to ${{ env.SERVICE_NAME }} environment failed!*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch/Tag:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK